// <auto-generated />
using GaiaProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GaiaDbContext.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GaiaDbContext.Models.AccountViewModels.UserFriend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<int>("Type");

                    b.Property<string>("UserId")
                        .HasMaxLength(50);

                    b.Property<string>("UserIdTo")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<string>("UserNameTo")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UserFriend");
                });

            modelBuilder.Entity("GaiaDbContext.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("groupid");

                    b.Property<int>("paygrade");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GaiaDbContext.Models.HomeViewModels.GameDeleteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactionName")
                        .HasMaxLength(20);

                    b.Property<int>("gameinfo_id");

                    b.Property<string>("gameinfo_name")
                        .HasMaxLength(20);

                    b.Property<int>("state");

                    b.Property<string>("username")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("GameDeleteModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.HomeViewModels.GameFactionExtendModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("ATT1");

                    b.Property<short>("ATT10");

                    b.Property<short>("ATT10Score");

                    b.Property<short>("ATT11");

                    b.Property<short>("ATT11Score");

                    b.Property<short>("ATT12");

                    b.Property<short>("ATT12Score");

                    b.Property<short>("ATT13");

                    b.Property<short>("ATT13Score");

                    b.Property<short>("ATT14");

                    b.Property<short>("ATT14Score");

                    b.Property<short>("ATT15");

                    b.Property<short>("ATT15Score");

                    b.Property<short>("ATT2");

                    b.Property<short>("ATT3");

                    b.Property<short>("ATT4");

                    b.Property<short>("ATT4Score");

                    b.Property<short>("ATT5");

                    b.Property<short>("ATT5Score");

                    b.Property<short>("ATT6");

                    b.Property<short>("ATT6Score");

                    b.Property<short>("ATT7");

                    b.Property<short>("ATT7Score");

                    b.Property<short>("ATT8");

                    b.Property<short>("ATT8Score");

                    b.Property<short>("ATT9");

                    b.Property<short>("ATT9Score");

                    b.Property<string>("FactionName")
                        .HasMaxLength(20);

                    b.Property<short>("STT1");

                    b.Property<short>("STT2");

                    b.Property<short>("STT3");

                    b.Property<short>("STT4");

                    b.Property<short>("STT5");

                    b.Property<short>("STT6");

                    b.Property<short>("STT7");

                    b.Property<short>("STT8");

                    b.Property<short>("STT9");

                    b.Property<string>("gameinfo_name")
                        .HasMaxLength(20);

                    b.Property<int>("rank");

                    b.Property<string>("username")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("GameFactionExtendModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.HomeViewModels.GameFactionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactionChineseName")
                        .HasMaxLength(20);

                    b.Property<string>("FactionName")
                        .HasMaxLength(20);

                    b.Property<int?>("UserCount");

                    b.Property<int>("gameinfo_id");

                    b.Property<string>("gameinfo_name")
                        .HasMaxLength(20);

                    b.Property<string>("kjPostion")
                        .HasMaxLength(20);

                    b.Property<string>("numberBuild")
                        .HasMaxLength(20);

                    b.Property<int>("numberFst1");

                    b.Property<int>("numberFst2");

                    b.Property<int>("rank");

                    b.Property<int?>("scoreDifference");

                    b.Property<int>("scoreFst1");

                    b.Property<int>("scoreFst2");

                    b.Property<int>("scoreKj");

                    b.Property<int?>("scoreLuo");

                    b.Property<int>("scorePw");

                    b.Property<string>("scoreRound")
                        .HasMaxLength(20);

                    b.Property<int>("scoreTotal");

                    b.Property<string>("userid")
                        .HasMaxLength(20);

                    b.Property<string>("username")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("GameFactionModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.HomeViewModels.GameInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ATTList")
                        .HasMaxLength(50);

                    b.Property<string>("FSTList")
                        .HasMaxLength(20);

                    b.Property<int?>("GameStatus");

                    b.Property<bool>("IsAllowLook");

                    b.Property<bool>("IsRandomOrder");

                    b.Property<bool>("IsRotatoMap");

                    b.Property<int>("IsTestGame");

                    b.Property<string>("MapSelction");

                    b.Property<string>("RBTList")
                        .HasMaxLength(50);

                    b.Property<string>("RSTList")
                        .HasMaxLength(50);

                    b.Property<string>("STT3List")
                        .HasMaxLength(30);

                    b.Property<string>("STT6List")
                        .HasMaxLength(50);

                    b.Property<int>("UserCount");

                    b.Property<DateTime?>("endtime");

                    b.Property<int>("isDelete");

                    b.Property<string>("loginfo");

                    b.Property<string>("name")
                        .HasMaxLength(20);

                    b.Property<int?>("round");

                    b.Property<int>("saveState");

                    b.Property<string>("scoreFaction");

                    b.Property<DateTime>("starttime");

                    b.Property<string>("userlist");

                    b.Property<string>("username");

                    b.Property<int>("version");

                    b.HasKey("Id");

                    b.ToTable("GameInfoModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.HomeViewModels.MatchInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents")
                        .HasMaxLength(40000);

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("NumberMax");

                    b.Property<int>("NumberNow");

                    b.Property<DateTime?>("RegistrationEndTime");

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("MatchInfoModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.HomeViewModels.MatchJoinModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddTime");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("Rank");

                    b.Property<int>("Score");

                    b.Property<int>("matchInfo_id");

                    b.Property<string>("userid")
                        .HasMaxLength(20);

                    b.Property<string>("username")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("MatchJoinModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.SystemModels.DonateRecordModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("addtime");

                    b.Property<string>("chequeuser")
                        .HasMaxLength(20);

                    b.Property<decimal>("donateprice");

                    b.Property<DateTime?>("donatetime");

                    b.Property<string>("donatetype")
                        .HasMaxLength(20);

                    b.Property<string>("donateuser")
                        .HasMaxLength(20);

                    b.Property<string>("moneytype");

                    b.Property<string>("name")
                        .HasMaxLength(50);

                    b.Property<int>("newid");

                    b.Property<string>("newname")
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .HasMaxLength(50);

                    b.Property<int>("state");

                    b.Property<string>("username")
                        .HasMaxLength(20);

                    b.HasKey("id");

                    b.ToTable("DonateRecordModel");
                });

            modelBuilder.Entity("GaiaDbContext.Models.SystemModels.NewsInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddTime");

                    b.Property<int>("Rank");

                    b.Property<string>("contents")
                        .HasMaxLength(4000);

                    b.Property<int>("isDelete");

                    b.Property<string>("name")
                        .HasMaxLength(50);

                    b.Property<string>("remark")
                        .HasMaxLength(50);

                    b.Property<int>("state");

                    b.Property<int>("type");

                    b.Property<string>("username")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("NewsInfoModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GaiaDbContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GaiaDbContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GaiaDbContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GaiaDbContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
